options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

public class Parser
{
    public static void main(String[] args) throws ParseException {
        System.out.println("Parser for programs in the Java-- language");
        Parser parser = new Parser(System.in);
        SimpleNode root = parser.Tree(); // returns reference to root node
    }
}

PARSER_END(Parser)

SKIP :
{
    " " | "\r" | "\t" | "\n" |
    <"//" "\n">     // TODO: line comments
    | <"/*" "*/">   // TODO: multi-line comments
}

TOKEN:
{
    < IMPORT: "import" >
    | < CLASS: "class" >
    | < EXTENDS: "extends" >
    | < PUBLIC: "public" >
    | < RETURN: "return" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < WHILE: "while" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < BOOL_VAL: "true" | "false" >
    | < NEW: "new" >
    | < THIS: "this" >
    | < LENGTH: "length" >
    | < DIGIT: ["0"-"9"]>
    | < INTEGER: (<DIGIT>)+ >
    | < LETTER: ["A"-"Z", "a"-"z"] >
    | < IDENTIFIER: <LETTER> (<LETTER> | <INTEGER>)* >  // <INTEGER> could be replaced with <DIGIT>
    | < LF: ";" >
    | < END_OF_FILE: "\0" >
    | < OPEN_BLOCK: "{" >
    | < CLOSE_BLOCK: "}" >
    | < SEP: "," >
    | < NOT: "!" >
    | < PROPERTY: "." >
    | < OPEN_ARRAY: "[" >
    | < CLOSE_ARRAY: "]" >
    | < ASSIGNMENT: "=" >
}

SimpleNode Tree(): {}
{
    Program(1) { return jjtThis; } // Java code inside brackets
}

void Program(int sign): {}
{
    ImportDeclaration()
    ClassDeclaration()
    <END_OF_FILE>
}

void ImportDeclaration(): {}
{
    (<IMPORT> <INTEGER> <LF>)*
}

void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER> [ <EXTENDS> <IDENTIFIER> ] <OPEN_BLOCK>
    (VarDeclaration())*
    (MethodDeclaration())*
    <CLOSE_BLOCK>
}

void VarDeclaration(): {}
{
    Type() <IDENTIFIER> <LF>
}

void MethodDeclaration(): {}
{
    <PUBLIC> Type() <IDENTIFIER> [ Type() <IDENTIFIER> (<SEP> Type() <IDENTIFIER> )* ] <OPEN_BLOCK>
       (VarDeclaration())*
       (Statement())*
       <RETURN> Expression() <LF>
    <CLOSE_BLOCK>
}

void Type(): {}
{
    <INT> "[]"
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>
}

void Statement(): {}
{
    "{" (Statement())* "}"
    | <IF> "(" Expression() ")" Statement() <ELSE> Statement()
    | <WHILE> "(" Expression() ")" Statement()
    | Expression() <LF>
    | <IDENTIFIER> "=" Expression() <LF>
    | <IDENTIFIER> <OPEN_ARRAY> Expression() <CLOSE_ARRAY> "=" Expression() <LF>
}

void Expression(): {}
{
    SimpleExp() ComplexExp()
}

void ComplexExp() #void: {}
{
    [ ExpLink() ComplexExp() ]
}

void ExpLink() #void: {}
{
    ( "&&" | "<" | "+" | "-" | "*" | "/" ) Expression()
    | "[" Expression() "]"
    | <PROPERTY> (
        <LENGTH>
        | <IDENTIFIER> "(" [ Expression() ( <SEP> Expression() )* ] ")"
    )
}

void SimpleExp() #void: {}
{
    <INTEGER>
    | <BOOL_VAL>
    | <IDENTIFIER>
    | <THIS>
    | <NEW> <INT> <OPEN_ARRAY> Expression() <CLOSE_ARRAY>
    | <NEW> <IDENTIFIER> "(" ")"
    | <NOT> Expression()
    | "(" Expression() ")"
}