options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

public class Parser
{
    public static void main(String[] args) {
        System.out.println("Parser for programs in the Java-- language");

        Parser parser;
        // open file as input stream
        try {
            parser = new Parser(new java.io.FileInputStream(args[0]));
        }
        catch (java.io.FileNotFoundException e) {
            System.out.println("ERROR: file " + args[0] + " not found.");
            return;
        }

        // create Syntax Tree (returns reference to root node)
        SimpleNode root = parser.Tree();

        // Print tree to console
        root.dump("");
    }
}

PARSER_END(Parser)

TOKEN:  // SKIPS
{
    < WHITESPACE: " " >                                                         |
    < CARRIAGE_RETURN: "\r" >                                                   |
    < TAB: "\t" >                                                               |
    < NEWLINE: "\n" >                                                           |
    < INLINE_COMMENT: "//" ( ~[ "\n", "\r" ] )* ( "\n" | "\r" | "\r\n" ) >      |
    < BLOCK_COMMENT: "/*" ( ~[ "*" ] )* "*" ( ~[ "/" ] (~[ "*" ] )* "*")* "/" >
}

SKIP :
{
    <WHITESPACE>        |
    <CARRIAGE_RETURN>   |
    <TAB>               |
    <NEWLINE>           |
    <INLINE_COMMENT>    |
    <BLOCK_COMMENT>
}

TOKEN:  // KEYWORDS
{
    < IMPORT:       "import"                         > |
    < EXTENDS:      "extends"                        > |
    < PUBLIC:       "public"                         > |
    < STATIC:       "static"                         > |
    < CLASS:        "class"                          > |
    < RETURN:       "return"                         > |
    < MAIN:         "main"                           > |
    < WHILE:        "while"                          > |
    < IF:           "if"                             > |
    < ELSE:         "else"                           > |
    < NEW:          "new"                            > |
    < THIS:         "this"                           > |
    < LENGTH:       "length"                         > |
    < TRUE:         "true"                           > |
    < FALSE:        "false"                          >
}

TOKEN:  // VAR TYPES
{
    < VOID:         "void"                           > |
    < INT:          "int"                            > |
    < BOOLEAN:      "boolean"                        > |
    < STRING:       "String"                         >
}

TOKEN:  // OPERATIONS
{
    < ASSIGNMENT:   "="                              > |
    < AND:          "&&"                             > |
    < LT:           "<"                              > |
    < SUM:          "+"                              > |
    < SUB:          "-"                              > |
    < MULT:         "*"                              > |
    < DIV:          "/"                              > |
    < NOT:          "!"                              >
}

TOKEN:  // CODE CHARACTERS
{
    < COMMA:        ","                              > |
    < DOT:          "."                              > |
    < SEMI_COLON:   ";"                              > |
    < OPEN_BLOCK:   "{"                              > |
    < CLOSE_BLOCK:  "}"                              > |
    < OPEN_ARRAY:   "["                              > |
    < CLOSE_ARRAY:  "]"                              > |
    < OPEN_PAR:     "("                              > |
    < CLOSE_PAR:    ")"                              >
}

TOKEN:  // INTEGERS AND IDENTIFIERS
{
    < INTEGER:      <BINARY> | <OCTAL> | <DECIMAL> | <HEXADECIMAL>      > |
    < #BINARY:      ( "0b" | "0B" ) ( [ "0"-"1" ] )+                    > |
    < #OCTAL:       "0" ( [ "0"-"7" ] )*                                > |
    < #DECIMAL:     [ "1"-"9" ] ( [ "0"-"9" ] )*                        > |
    < #HEXADECIMAL: ( "0x" | "0X" ) ( [ "0"-"9", "A"-"F", "a"-"f" ] )+  > |

    < IDENTIFIER:   <LETTER> ( <LETTER> | <DIGIT> )*                    > |
    < #LETTER:      [ "$", "_", "a"-"z", "A"-"Z" ]                      > |
    < #DIGIT:       [ "0"-"9" ]                                         >
}


SimpleNode Tree(): {}
{
    Program(1) { return jjtThis; } // Java code inside brackets
}


void Program(int sign): {}
{
    ImportDeclaration()
    ClassDeclaration()
    <EOF>
}


void ImportDeclaration(): {}
{
    ( <IMPORT> <IDENTIFIER> <SEMI_COLON> )*
}


void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER> [ <EXTENDS> <IDENTIFIER> ] <OPEN_BLOCK>
        ( VarDeclaration() )*
        ( MethodDeclaration() )*
    <CLOSE_BLOCK>
}


void VarDeclaration(): {}
{
    Type() <IDENTIFIER> <SEMI_COLON>
}


void MethodDeclaration(): {}
{
    RegularMethod() |
    MainMethod()
}

void RegularMethod() #void: {} {
    <PUBLIC> Type() <IDENTIFIER> [ Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )* ]
    <OPEN_BLOCK> MethodBody() <RETURN> Expression() <SEMI_COLON> <CLOSE_BLOCK>
}
void MainMethod() #void: {} {
    <PUBLIC> <STATIC> <VOID> <MAIN> <OPEN_PAR> <STRING> <OPEN_ARRAY> <CLOSE_ARRAY> <IDENTIFIER> <CLOSE_PAR>
    <OPEN_BLOCK> MethodBody() <CLOSE_BLOCK>
}
void MethodBody() #void: {} { ( VarDeclaration() )* ( Statement() )* }


void Type(): {}
{
    <INT> <OPEN_ARRAY> <CLOSE_ARRAY>    |
    <BOOLEAN>                           |
    <INT>                               |
    <IDENTIFIER>
}

void Statement(): {}
{
    MultiStatementBlock()               |
    IfElseBlock()                       |
    WhileBlock()                        |
    Expression() <SEMI_COLON>           |
    Assignment()                        |
    ArrayAssignment()
}

void MultiStatementBlock() #void: {} { <OPEN_BLOCK> ( Statement() )* <CLOSE_BLOCK> }
void IfElseBlock() #void: {} { <IF> <OPEN_PAR> Expression() <CLOSE_PAR> Statement() <ELSE> Statement() }
void WhileBlock() #void: {} { <WHILE> <OPEN_PAR> Expression() <CLOSE_PAR> Statement() }
void Assignment() #void: {} { <IDENTIFIER> <ASSIGNMENT> Expression() <SEMI_COLON> }
void ArrayAssignment() #void: {} {
    <IDENTIFIER> <OPEN_ARRAY> Expression() <CLOSE_ARRAY> <ASSIGNMENT> Expression() <SEMI_COLON> }


void Expression(): {} {
    SimpleExp() ComplexExp()
}

void ComplexExp() #void: {} {
    [ ExpLink() ComplexExp() ]
}

void ExpLink() #void: {}
{
    CompareOp() Expression()                |
    <OPEN_ARRAY> Expression() <CLOSE_ARRAY> |
    GetLength()                             |
    CallMethod()
}

void CompareOp() #void: {} { <AND> | <LT> | <SUM> | <SUB> | <MULT> | <DIV> }
void GetLength() #void: {} { <DOT> <LENGTH> }
void CallMethod() #void: {} {
    <DOT> <IDENTIFIER> <OPEN_PAR>
        [ Expression() ( <COMMA> Expression() )* ]
    <CLOSE_PAR>
}


void SimpleExp() #void: {}
{
    <INTEGER>                           |
    <TRUE>                              |
    <FALSE>                             |
    <IDENTIFIER>                        |
    <THIS>                              |
    CreateArray()                       |
    CreateObject()                      |
    <NOT> Expression()                  |
    <OPEN_PAR> Expression() <CLOSE_PAR>
}

void CreateArray() #void: {} { <NEW> <INT> <OPEN_ARRAY> Expression() <CLOSE_ARRAY> }
void CreateObject() #void: {} { <NEW> <IDENTIFIER> <OPEN_PAR> <CLOSE_PAR> }