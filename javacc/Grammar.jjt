options
{
    LOOKAHEAD=1;
    MULTI = true;
}

PARSER_BEGIN(Parser)

public class Parser
{
    /**
     * Current number os syntax errors while parsing
     */
    private static int numErrors = 0;

    /**
     * Maximum number of syntax errors accepted before terminating
     * parsing due to too many errors
     */
    private static int MAX_ERRORS = 10;

    /**
    * Main method
    * @param args
    * @throws ParseException
    */
    public static void main(String[] args) throws ParseException {
        System.out.println("Parser for programs in the Java-- language");

        Parser parser;
        // open file as input stream
        try {
            numErrors = 0;
            parser = new Parser(new java.io.FileInputStream(args[0]));
        }
        catch (java.io.FileNotFoundException e) {
            System.out.println("ERROR: file " + args[0] + " not found.");
            return;
        }

        SimpleNode root;
        // create Syntax Tree (returns reference to root node)
        root = parser.Tree();

        // added
        if (numErrors != 0) {
            throw(new ParseException("Parsing has errors!"));
        }

        // Print tree to console
        root.dump("");
    }

    /**
     * Report syntax error and increment error counter
     */
    static void reportError(ParseException e, String statement) throws ParseException {
        // Print Warning
        System.out.println("Syntax error on " + statement + " statement.");
        // Print parsing error
        System.out.println(e.toString());
        // Print separator
        System.out.println("========================");
        numErrors++;

        if (numErrors >= MAX_ERRORS) {
              throw(new ParseException("Reached maximum number of errors (" + MAX_ERRORS + "). Terminating."));
        }
    }
}

PARSER_END(Parser)

/**
 * Tokens to ignore
 */
SKIP :
{
    < WHITESPACE:      " "                                                         > |
    < TAB:             "\t"                                                        > |
    < CARRIAGE_RETURN: "\r"                                                        > |
    < NEWLINE:         "\n"                                                        > |
    < INLINE_COMMENT:  "//" ( ~[ "\n", "\r" ] )* ( "\n" | "\r" | "\r\n" )          > |
    < BLOCK_COMMENT:   "/*" ( ~[ "*" ] )* "*" ( ~[ "/" ] (~[ "*" ] )* "*")* "/"    >
}

/**
 * Keywords
 */
TOKEN:
{
    < IMPORT:       "import"                         > |
    < EXTENDS:      "extends"                        > |
    < PUBLIC:       "public"                         > |
    < STATIC:       "static"                         > |
    < CLASS:        "class"                          > |
    < RETURN:       "return"                         > |
    < MAIN:         "main"                           > |
    < WHILE:        "while"                          > |
    < IF:           "if"                             > |
    < ELSE:         "else"                           > |
    < NEW:          "new"                            > |
    < THIS:         "this"                           > |
    < LENGTH:       "length"                         > |
    < TRUE:         "true"                           > |
    < FALSE:        "false"                          >
}

/**
 * Variable types
 */
TOKEN:
{
    < VOID:         "void"                           > |
    < INT:          "int"                            > |
    < BOOLEAN:      "boolean"                        > |
    < STRING:       "String"                         >
}

/**
 * Operations
 */
TOKEN:
{
    < ASSIGNMENT:   "="                              > |
    < AND:          "&&"                             > |
    < LT:           "<"                              > |
    < SUM:          "+"                              > |
    < SUB:          "-"                              > |
    < MULT:         "*"                              > |
    < DIV:          "/"                              > |
    < NOT:          "!"                              >
}

/**
 * Code characters
 */
TOKEN:
{
    < COMMA:        ","                              > |
    < DOT:          "."                              > |
    < SEMI_COLON:   ";"                              > |
    < OPEN_BLOCK:   "{"                              > |
    < CLOSE_BLOCK:  "}"                              > |
    < OPEN_ARRAY:   "["                              > |
    < CLOSE_ARRAY:  "]"                              > |
    < OPEN_PAR:     "("                              > |
    < CLOSE_PAR:    ")"                              >
}

/**
 * Integers and identifiers
 */
TOKEN:
{
    < INTEGER:      <BINARY> | <OCTAL> | <DECIMAL> | <HEXADECIMAL>      > |
    < #BINARY:      ( "0b" | "0B" ) ( [ "0"-"1" ] )+                    > |
    < #OCTAL:       "0" ( [ "0"-"7" ] )*                                > |
    < #DECIMAL:     [ "1"-"9" ] ( [ "0"-"9" ] )*                        > |
    < #HEXADECIMAL: ( "0x" | "0X" ) ( [ "0"-"9", "A"-"F", "a"-"f" ] )+  > |

    < IDENTIFIER:   <LETTER> ( <LETTER> | <DIGIT> )*                    > |
    < #LETTER:      [ "$", "_", "a"-"z", "A"-"Z" ]                      > |
    < #DIGIT:       [ "0"-"9" ]                                         >
}


SimpleNode Tree() : {}
{
    Program(1) { return jjtThis; } // Java code inside brackets
}


void Program(int sign): {}
{
    ImportDeclaration()
    ClassDeclaration()
    <EOF>
}


void ImportDeclaration() : {} {
    ( Import() )*
}

void Import() : { Token t, tMethod; } {

    <IMPORT>
    [ <STATIC> { jjtThis.isStatic = true; } ]
    t=<IDENTIFIER> { jjtThis.importId = t.image; }
    [
        (
            <OPEN_PAR>
            [ Type() ( <COMMA> Type() )* ]
            <CLOSE_PAR>
        )
                |
        (
            <DOT> { jjtThis.isMethod = true; }
            tMethod=<IDENTIFIER> { jjtThis.methodId = tMethod.image; }
            <OPEN_PAR>
                [
                    Type() ( <COMMA> Type() )*      |
                    <VOID>
                ]
            <CLOSE_PAR>
            [ ReturnType() ]
        )
    ]
    <SEMI_COLON>

}


void ClassDeclaration() : { Token id, ext; } {

    <CLASS>
    // class name/identifier
    id=<IDENTIFIER> { jjtThis.classId = id.image; }
    // extended class name/identifier
    [ <EXTENDS> ext=<IDENTIFIER> { jjtThis.extId = ext.image; } ]
    <OPEN_BLOCK>
        ( VarDeclaration() )*
        ( MethodDeclaration() )*
    <CLOSE_BLOCK>

}


void VarDeclaration() : { Token id; } {
    Type() id=<IDENTIFIER> <SEMI_COLON> { jjtThis.id = id.image; }
}


void MethodDeclaration() #void: {} { <PUBLIC> ( RegularMethod() | MainMethod() ) }

void RegularMethod() : { Token t; } {
    Type() t=<IDENTIFIER> { jjtThis.methodId = t.image; } <OPEN_PAR> [ MethodParams() ] <CLOSE_PAR>
    <OPEN_BLOCK>
        MethodBody()
        Return()
    <CLOSE_BLOCK>
}

void Return() : {} {
    <RETURN> Expression() <SEMI_COLON>
}

void MethodParams() : {} { MethodParam() ( <COMMA> MethodParam() )* }

void MethodParam() : { Token id; } {
    Type() id=<IDENTIFIER> { jjtThis.paramId = id.image; }
}

void MainMethod() : {} {
    <STATIC> <VOID> <MAIN> <OPEN_PAR> MainParams() <CLOSE_PAR>
    <OPEN_BLOCK>
        MethodBody()
    <CLOSE_BLOCK>
}

void MainParams() : { Token id; } {
    <STRING> <OPEN_ARRAY> <CLOSE_ARRAY> id=<IDENTIFIER> { jjtThis.paramId = id.image; }
}

void MethodBody() #void: {} { ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )* }

void Type() : { Token id; }
{
    <INT> { jjtThis.type = "int"; }
        [ <OPEN_ARRAY> <CLOSE_ARRAY> { jjtThis.array = true; } ]    |
    <BOOLEAN> { jjtThis.type = "bool"; }                            |
    id=<IDENTIFIER> { jjtThis.id = id.image; }
}

void ReturnType() : { Token id; } {
    <INT> { jjtThis.type = "int"; }
        [ <OPEN_ARRAY> <CLOSE_ARRAY> { jjtThis.array = true; } ]    |
    <BOOLEAN> { jjtThis.type = "bool"; }                            |
    <VOID> { jjtThis.type  = "void"; }                              |
    id=<IDENTIFIER> { jjtThis.id = id.image; }
}

void Statement() : { Token t; } {

    MultiStatementBlock() { jjtThis.type = "block"; }                   |
    IfElseBlock() { jjtThis.type = "if"; }                              |
    WhileBlock() { jjtThis.type = "while"; }                            |
    t = <IDENTIFIER> { jjtThis.id = t.image; jjtThis.type = "id"; } (
        ArrayExp() { jjtThis.array = true; }
        [ AssignStatement() { jjtThis.assign = true; } ]    |
        AssignStatement() { jjtThis.assign = true; }        |
        ObjectSpecific()
    ) <SEMI_COLON>                                                      |
    StatementExpression() <SEMI_COLON> { jjtThis.type = "statExp"; }

}

void AssignStatement() : {} {
    <ASSIGNMENT> Expression()
}

void MultiStatementBlock() #void: {} { <OPEN_BLOCK> ( Statement() )* <CLOSE_BLOCK> }
void IfElseBlock() : {} {

    try {
        <IF> <OPEN_PAR> Expression() <CLOSE_PAR> Statement() <ELSE> Statement()
    }
    catch(ParseException e) {
        reportError(e, "Error parsing If-Else block");
    }

}
void WhileBlock() : {}
{
    <WHILE>
    try {
        <OPEN_PAR> Expression() <CLOSE_PAR>
    }
    catch(ParseException e) {
        reportError(e, "Error parsing While block");
        // DEEP ERROR RECOVERY
        // The loop consumes tokens all the way up to a token of
        // "kind".  We use a do-while loop rather than a while because the
        // current token is the one immediately before the erroneous token
        // (in our case the token immediately before what should have been
        // "while".
        Token t;
        do {
            // getToken(int) does not consume token
            t = getToken(1);
            if (t.kind == EOF || t.kind == OPEN_BLOCK || t.kind == IF || t.kind == WHILE)
                break;
            t = getNextToken();
        } while (t.kind != CLOSE_PAR);
    }
    Statement()
}

/*
void Assignment() #Statement: { jjtThis.assign = true; } { <ASSIGNMENT> Expression() <SEMI_COLON> }
void ArrayAssignment() #Statement: { jjtThis.array = true; jjtThis.assign = true; } {
    <OPEN_ARRAY> Expression() <CLOSE_ARRAY> <ASSIGNMENT> Expression() <SEMI_COLON>
}
*/

void Expression() #void: {} {
    And()
}

void And() #void: {} {
    LT() ( LOOKAHEAD(2) <AND> LT() #and(2) )*
}

void LT() #void: {} {
    Sum() ( LOOKAHEAD(2) <LT> Sum() #lt(2) )*
}

void Sum() #void: {} {
    Sub() ( LOOKAHEAD(2) <SUM> Sub() #sum(2) )*
}

void Sub() #void: {} {
    Mult() ( LOOKAHEAD(2) <SUB> Mult() #sub(2) )*
}

void Mult() #void: {} {
    Div() ( LOOKAHEAD(2) <MULT> Div() #mult(2) )*
}

void Div() #void: {} {
    LowerExpression() ( LOOKAHEAD(2) <DIV> LowerExpression() #div(2) )*
}

void LowerExpression() #void: { Token t; } {
    ( SimpleExp() | t=<IDENTIFIER> { jjtThis.id = t.image; } #id ) ComplexExp()
}

void StatementExpression() #void: {} {
    SimpleExp() ComplexExp()
}

void ComplexExp() #void: {} {
    [ LOOKAHEAD(2) ExpLink() ComplexExp() ]
}

void ExpLink() #void: {} {
    ArrayExp() | ObjectSpecific()
}

void ArrayExp() #void: {} {
    <OPEN_ARRAY> Expression() <CLOSE_ARRAY>
}

void ObjectSpecific() #void: {} {
    <DOT> ( GetLength() | CallMethod() )
}

void GetLength() : {} { <LENGTH> }
void CallMethod() : { Token id; } {
    id=<IDENTIFIER> { jjtThis.methodId = id.image; }
    try {
        <OPEN_PAR> [ MethodArgs() ] <CLOSE_PAR>
    } catch (ParseException e) {
        reportError(e, "Error calling method for object");
        // clean parenthesis
        Token t;
        do {
            t = getToken(1);
            if (t.kind == EOF)
                break;
            t = getNextToken();
        } while (t.kind != CLOSE_PAR);
        // throw error so 'while' can report it
        throw(e);
    }
}

void MethodArgs() #void: {} { Expression() ( <COMMA> Expression() )* }


void SimpleExp() #void: { Token t; }
{
    t=<INTEGER> { jjtThis.value = t.image; } #integer   |
    <TRUE> { jjtThis.value = true; } #bool              |
    <FALSE>   #bool                                     |
    <THIS>    #_this                                    |
    CreateObject()                                      |
    <NOT> Expression() #not                             |
    try {
        <OPEN_PAR> Expression() <CLOSE_PAR>
    } catch (ParseException e) {
        reportError(e, "Missing parenthesis");
        // clean parenthesis
        Token cleanToken;
        do {
            cleanToken = getToken(1);
            if (cleanToken.kind == EOF)
                break;
            cleanToken = getNextToken();
        } while (cleanToken.kind != CLOSE_PAR);
        // throw error so 'while' can report it
        throw(e);
    }
}
void CreateObject() #void: {} { <NEW> ( CreateArray() | CreatePrimitive() ) }
void CreateArray() #_new: { jjtThis.isArray = true; } { <INT> <OPEN_ARRAY> Expression() <CLOSE_ARRAY> }
void CreatePrimitive() #_new: { Token t; } { t=<IDENTIFIER> { jjtThis.primId = t.image; } <OPEN_PAR> <CLOSE_PAR> }
