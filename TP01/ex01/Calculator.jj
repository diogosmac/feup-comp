/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options {
    LOOKAHEAD=2;
    FORCE_LA_CHECK=true;
}

PARSER_BEGIN(Calculator)

import java.util.HashMap;
import java.lang.Integer;
import java.lang.String;

public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
    public static void main(String[] args) throws ParseException {

        System.out.println("Parser for a calculator that accepts expressions like the following example");
        System.out.println("\tExample: ");
        System.out.println("\t\ta=2;");
        System.out.println("\t\tb=3;");
        System.out.println("\t\ta*b;");
        System.out.println("\nWrite expression: ");

        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression();

        myCalc.symbol(root);
        
        System.out.println("Expression value: "+ myCalc.eval(root));
    }

    HashMap<String, Integer> table = new HashMap<String,Integer>();

    void symbol(SimpleNode node) {
        for(int i=0; i< node.jjtGetNumChildren(); i++) {
            symbol((SimpleNode) node.jjtGetChild(i));
        }
        if(node.id == CalculatorTreeConstants.JJTASSIGNMENT) {
            table.put(node.identifier, Integer.valueOf(node.val));
            return;
        }
        return;
    }

    int eval(SimpleNode node) {

		if(node.jjtGetNumChildren() == 0) { // leaf node with integer value
            if(node.identifier != null)  { //  the nodes with the identifier are assign nodes
                if(table.containsKey(node.identifier))
                    return  ((Integer) table.get(node.identifier)).intValue();
                else {
                    System.out.println("identifier "+node.identifier+" not inicialized!");
                    System.exit(1);
                }
            } else {
                return node.val;
            }
		} else if(node.jjtGetNumChildren() == 1) { // only one child
			return this.eval((SimpleNode) node.jjtGetChild(0));
        } else if(node.id == CalculatorTreeConstants.JJTEXPRESSION) {
            for(int i=0; i< node.jjtGetNumChildren(); i++) {
                SimpleNode sn = (SimpleNode) node.jjtGetChild(i);
                if(sn.id != CalculatorTreeConstants.JJTASSIGNMENT)
                    return this.eval(sn);     // there is only one expression to evaluate
            }
        } else {
            SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
            SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

		    switch(node.id) {
		        case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
	   			case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
	   			case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
	   			case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
	   			default : // abort
                    System.out.println("Operador ilegal!");
					System.exit(1);
	        }
		}
        return 0;
    }
}


PARSER_END(Calculator)

SKIP : {
    " " | "\n" | "\r" | "\t"
}

TOKEN : {
    < INTEGER : (["0"-"9"])+ >
    | <IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])* >
}

SimpleNode Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Expression */
   try {
/*@egen*/
   (Assignment())*
   Expr1() ";"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Assignment(): {/*@bgen(jjtree) Assignment */
                    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Assignment */
    try {
/*@egen*/  
    t=<IDENTIFIER>
    {
        jjtn000.identifier = new String(t.image);
    }
    "="
    t=<INTEGER> ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.val = Integer.parseInt(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr1()      : {}
{
    Expr2(1)
    [
        (
            "+"/*@bgen(jjtree) #Add( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ Expr2(1)/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        
            | "-"/*@bgen(jjtree) #Sub( 2) */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTSUB);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ Expr2(1)/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/        
        )
    ]
}

void Expr2(int sign): {/*@bgen(jjtree) Expr2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}    // 1: positive; -1: negative
{/*@bgen(jjtree) Expr2 */
    try {
/*@egen*/
    Expr3(sign)
    (
        "*"/*@bgen(jjtree) #Mul( 2) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTMUL);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/        
        | "/"/*@bgen(jjtree) #Div( 2) */
              {
                SimpleNode jjtn002 = new SimpleNode(JJTDIV);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/        
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr3(int sign)      : {Token t;}
{/*@bgen(jjtree) Term */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTTERM);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        t=<INTEGER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
        {
            jjtn001.val = sign * Integer.parseInt(t.image);
        }
        |
        t=<IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
        {
            jjtn001.identifier = new String(t.image);
        }
	)/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      
    | "-" Expr3(-1) // para nao aceitar -(2+3)
    | "(" Expr1() ")"
}