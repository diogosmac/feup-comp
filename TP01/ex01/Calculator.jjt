options {
    LOOKAHEAD=2;
    FORCE_LA_CHECK=true;
}

PARSER_BEGIN(Calculator)

import java.util.HashMap;
import java.lang.Integer;
import java.lang.String;

public class Calculator {
    public static void main(String[] args) throws ParseException {

        System.out.println("Parser for a calculator that accepts expressions like the following example");
        System.out.println("\tExample: ");
        System.out.println("\t\ta=2;");
        System.out.println("\t\tb=3;");
        System.out.println("\t\ta*b;");
        System.out.println("\nWrite expression: ");

        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression();

        myCalc.symbol(root);
        
        System.out.println("Expression value: "+ myCalc.eval(root));
    }

    HashMap<String, Integer> table = new HashMap<String,Integer>();

    void symbol(SimpleNode node) {
        for(int i=0; i< node.jjtGetNumChildren(); i++) {
            symbol((SimpleNode) node.jjtGetChild(i));
        }
        if(node.id == CalculatorTreeConstants.JJTASSIGNMENT) {
            table.put(node.identifier, Integer.valueOf(node.val));
            return;
        }
        return;
    }

    int eval(SimpleNode node) {

		if(node.jjtGetNumChildren() == 0) { // leaf node with integer value
            if(node.identifier != null)  { //  the nodes with the identifier are assign nodes
                if(table.containsKey(node.identifier))
                    return  ((Integer) table.get(node.identifier)).intValue();
                else {
                    System.out.println("identifier "+node.identifier+" not inicialized!");
                    System.exit(1);
                }
            } else {
                return node.val;
            }
		} else if(node.jjtGetNumChildren() == 1) { // only one child
			return this.eval((SimpleNode) node.jjtGetChild(0));
        } else if(node.id == CalculatorTreeConstants.JJTEXPRESSION) {
            for(int i=0; i< node.jjtGetNumChildren(); i++) {
                SimpleNode sn = (SimpleNode) node.jjtGetChild(i);
                if(sn.id != CalculatorTreeConstants.JJTASSIGNMENT)
                    return this.eval(sn);     // there is only one expression to evaluate
            }
        } else {
            SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
            SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

		    switch(node.Op) {
		        case MyConstants.ADD : return eval( lhs ) + eval( rhs );
	   			case MyConstants.SUB : return eval( lhs ) - eval( rhs );
	   			case MyConstants.MUL : return eval( lhs ) * eval( rhs );
	   			case MyConstants.DIV : return eval( lhs ) / eval( rhs );
	   			default : // abort
                    System.out.println("Operador ilegal!");
					System.exit(1);
	        }
		}
        return 0;
    }
}


PARSER_END(Calculator)

SKIP : {
    " " | "\n" | "\r" | "\t"
}

TOKEN : {
    < INTEGER : (["0"-"9"])+ >
    | <IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])* >
}

SimpleNode Expression() : {} {
   (Assignment())*
   Expr1() ";" {return jjtThis;}
}

void Assignment(): {Token t;}
{  
    t=<IDENTIFIER>
    {
        jjtThis.identifier = new String(t.image);
    }
    "="
    t=<INTEGER> ";"
    {
        jjtThis.val = Integer.parseInt(t.image);
    }
}

void Expr1(): {}
{  
    Expr2(1)
    (
        (
            "+" {jjtThis.Op = MyConstants.ADD;}
            | "-" {jjtThis.Op = MyConstants.SUB;}
        )
        Expr2(1)
    )?
}

void Expr2(int sign): {}    // 1: positive; -1: negative
{
    Expr3(sign)
    (
        (
            "*" {jjtThis.Op = MyConstants.MUL;}
   	        | "/" {jjtThis.Op = MyConstants.DIV;}
   	    )
   	    Expr3(1)
    )?
}

void Expr3(int sign):  {Token t;}
{
    (
        t=<INTEGER>
        {
            jjtThis.val = sign * Integer.parseInt(t.image);
        }
        |
        t=<IDENTIFIER>
        {
            jjtThis.identifier = new String(t.image);
        }
	)
    | "-" Expr3(-1) // para nao aceitar -(2+3)
    | "(" Expr1() ")"
}

